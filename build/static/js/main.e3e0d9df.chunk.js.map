{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","rows","columns","moves","playerTurn","reset","setState","winner","getPiece","x","y","filter","item","getWinningMoveForVelocity","xPosition","yPosition","xVelocity","yVelocity","winnningMoves","player","delta","checkX","checkY","checkPiece","push","checkForWin","velocities","dex","length","element","winningMoves","addMove","nextPlayTurn","availableYPosition","postion","concat","this","rowViews","row","columnViews","column","piece","style","width","height","backgroundColor","display","padding","cursor","onClick","borderRadius","flex","border","undefined","flexDirection","position","left","right","bottom","top","zIndex","justifyContent","alignItems","color","fontWeight","fontSize","props","Object","assign","styles","container","renderBoard","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3e0d9df.chunk.js","sourcesContent":["import React from 'react';\nimport'./App.css';\n\nexport default class App extends React.Component{\n  state ={\n    rows: 6,\n    columns: 7,\n    moves: [],\n    playerTurn: 'red',\n  };\n\n  //restart the game, the game always start with red go first\n  reset = () =>{\n    this.setState({moves:[], winner:null, playerTurn:'red'});\n  }\n\n  getPiece = (x,y) => {\n    const list = this.state.moves.filter((item)=>{\n      return (item.x ===x && item.y === y);\n    });\n\n    return list[0];\n  }\n\n  getWinningMoveForVelocity = (xPosition, yPosition, xVelocity, yVelocity)=>{\n    const winnningMoves= [{x: xPosition,y:yPosition}];\n    const player = this.getPiece(xPosition,yPosition).player;\n\n    for (let delta = 1; delta <= 3; delta += 1){\n      const checkX = xPosition + xVelocity * delta;\n      const checkY = yPosition + yVelocity * delta;\n\n      const checkPiece = this.getPiece(checkX,checkY);\n      if (checkPiece && checkPiece.player === player){\n        winnningMoves.push({x:checkX,y:checkY});\n      }else{\n        break;\n      }\n    }\n\n    for (let delta = -1; delta >= -3; delta -= 1){\n      const checkX = xPosition + xVelocity * delta;\n      const checkY = yPosition + yVelocity * delta;\n\n      const checkPiece = this.getPiece(checkX,checkY);\n      if (checkPiece && checkPiece.player === player){\n        winnningMoves.push({x:checkX,y:checkY});\n      }else{\n        break;\n      }\n    }\n\n    return winnningMoves;\n  }\n\ncheckForWin =(x,y) =>{\n  const velocities = [{x:1,y:0},{x:0,y:1},{x:-1,y:1},{x:1,y:1}];\n  for (let dex = 0; dex < velocities.length; dex++) {\n    const element = velocities[dex];\n    const winningMoves =this.getWinningMoveForVelocity(x,y,element.x,element.y,)\n    if(winningMoves.length >3){\n      this.setState({winner: this.getPiece(x,y).player, winningMoves});\n    }\n  }\n}\n\n  addMove = (x,y) => {\n    const { playerTurn} = this.state;\n    const nextPlayTurn = playerTurn === 'red' ? 'yellow' : 'red';\n    let availableYPosition = null;\n    for (let postion = this.state.rows -1; postion>=0; postion--) {\n      if(!this.getPiece(x, postion)){\n        availableYPosition = postion;\n        break;\n      }\n    }\n    if(availableYPosition!=null){\n      this.setState({moves: this.state.moves.concat({x, y: availableYPosition, player: playerTurn}), playerTurn:nextPlayTurn},()=>this.checkForWin(x,availableYPosition,playerTurn))\n    }\n  }\n\n  \n  renderBoard(){\n    const {winner} = this.state;\n    const rowViews = [];\n    \n    // the base board for the game\n    for(let row = 0; row< this.state.rows; row += 1){\n      const columnViews=[];\n      for(let column = 0; column< this.state.columns; column += 1){\n        const piece = this.getPiece(column,row);\n        columnViews.push(\n          <div style= {{width:100, height:100, backgroundColor:'wheat',display:'flex', padding :5, cursor:'pointer'}}>\n            <div onClick={()=>{this.addMove(column,row)}} style={{borderRadius:'50%', backgroundColor:'white', flex:1, display:'flex'}}>\n              {piece ? <div style={{backgroundColor: piece.player, flex: 1, borderRadius:'50%', border:'1px solid black'}}/>:undefined}\n            </div>\n          </div>\n        );\n      }\n      rowViews.push(\n      <div style={{display: 'flex', flexDirection:'row'}}>{columnViews}</div>\n      );\n    }\n    \n    return(\n      <div>\n        {winner && <div onClick={this.reset} style = {{position: 'absolute', left:0, right:0, bottom:0, top:0, zIndex:3, display:'flex', justifyContent:'center',alignItems:'center', color:'Black', fontWeight: '200',fontSize:'8vw'}}>{`${winner} Wins!`}</div>}\n        {rowViews}\n      </div>\n    );\n  }\n\n  render(){\n    const{style}= this.props;\n    const {playerTurn} = this.state;\n\n    // button for player to restart the game, notify the next move, display the gameboard\n    return(\n      <div style ={style ? Object.assign({}, styles.container,style) : styles.container}>\n        <div>\n          <button onClick={this.reset} style= {{width:100, height:50}}>Restart</button>\n          <div>{`Next player: ${playerTurn} `}</div>\n          {this.renderBoard()}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container:{\n    height:'100%',\n    padding:5,\n    display:'flex',\n    justifyContent:'center',\n    alignItems:'center'\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}